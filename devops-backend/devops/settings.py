"""
Django settings for devops project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-dui4cd#m(3^9#mwqzscp)tr@lfq0uf$@4rh00^zd_yoq&$7(%r'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

JENKINS_URL = os.environ.get('JENKINS_URL', 'http://23.21.183.151:8080') 
JENKINS_USERNAME = os.environ.get('JENKINS_USERNAME', 'admin')           
JENKINS_API_TOKEN = os.environ.get('JENKINS_API_TOKEN', '11ba358712d0b24daa8ed8d7fad729def5')

SONARQUBE_URL = os.environ.get("SONARQUBE_URL", "http://23.21.183.151:9000") 
SONARQUBE_API_TOKEN = os.environ.get("SONARQUBE_API_TOKEN", "squ_9341a1447d4d1a2b5ad05cf537b54e0ebbcb4773")


KUBECONFIG_FILENAME = "k3s_django_config.yaml"
DEFAULT_KUBECONFIG_PATH = str(BASE_DIR / KUBECONFIG_FILENAME )
KUBERNETES_CONFIG_PATH = os.environ.get("KUBERNETES_CONFIG_PATH", DEFAULT_KUBECONFIG_PATH)

EC2_INSTANCE_IDS = ['i-0b1ed2204719f11dc', 'i-0babfa0f37936acef']

ARGOCD_SERVER_URL = os.getenv("ARGOCD_SERVER_URL", 'http://44.194.151.195:31665')
ARGOCD_USERNAME = os.getenv("ARGOCD_USERNAME", 'admin')
ARGOCD_PASSWORD = os.getenv("ARGOCD_PASSWORD", 'u2VkWswyq1uiGnSF')
ARGOCD_SSL_VERIFY = os.getenv("ARGOCD_SSL_VERIFY", "True").lower() in ('true', '1', 't')
ARGOCD_TOKEN_CACHE_TIMEOUT = int(os.getenv("ARGOCD_TOKEN_CACHE_TIMEOUT", 60 * 60 * 23))

CACHES = {
    'default': {
        # Use LocMemCache for development (not shared between processes)
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'argocd-token-cache', # Unique identifier for this cache instance
        'TIMEOUT': ARGOCD_TOKEN_CACHE_TIMEOUT,
    }
}

SONARQUBE_DEFAULT_METRIC_KEYS = [
    'bugs',
    'vulnerabilities',
    'security_hotspots',
    'code_smells',
    'coverage',
    'duplicated_lines_density',
    'security_rating',
    'alert_status', 
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

     # 3rd Party Apps
    'rest_framework',            # Add DRF
    'rest_framework.authtoken', # Needed by dj-rest-auth by default, or configure for JWT
    'dj_rest_auth',              # Add dj-rest-auth
    'django.contrib.sites',      # Required by dj-rest-auth registration
    'allauth',                   # Required by dj-rest-auth
    'allauth.account',           # Required by dj-rest-auth
    'allauth.socialaccount',     # Optional: If you want social login later
    'dj_rest_auth.registration', # Add dj-rest-auth registration module
    'corsheaders',               # Add CORS headers

    # my apps
    'accounts',
    'jenkins_api',
    'sonarqube_integration',
    'kubernetes_integration',
    'ec2_metrics',
    'argocd_api',   
]

REST_AUTH = {
    'USE_JWT': True,
    'JWT_AUTH_COOKIE': 'my-app-auth',
    'JWT_AUTH_REFRESH_COOKIE': 'my-refresh-token',
    'JWT_AUTH_HTTPONLY': True, 
}

from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': False,
    'UPDATE_LAST_LOGIN': True, 

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY, 
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,

    'AUTH_HEADER_TYPES': ('Bearer',), 
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # Ensure ONLY JWT Authentication is used by default for API requests
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        # Set a default permission if you like, or leave it commented
        # if you prefer setting permissions per-view (as you are doing)
        # 'rest_framework.permissions.AllowAny',
        # 'rest_framework.permissions.IsAuthenticated',
    ]
    # You can add other DRF settings here if needed (pagination, etc.)
}


SITE_ID = 1


EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",  
    "http://127.0.0.1:5173",
]

CORS_ALLOW_CREDENTIALS = True

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

ACCOUNT_EMAIL_VERIFICATION = 'none'
ACCOUNT_LOGIN_METHODS = {'email', 'username'}
ACCOUNT_SIGNUP_FIELDS = ['email*', 'username*', 'password1*', 'password2*']
ACCOUNT_UNIQUE_EMAIL = True

ROOT_URLCONF = 'devops.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'devops.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'postgres',
        'USER': 'postgres',
        'PASSWORD': 'anusuya',
        'HOST': 'localhost',
        'PORT': '5432',
    
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
